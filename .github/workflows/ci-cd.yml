name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # - name: Set up Node.js
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: '16'

    # - name: Cache Node.js modules
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.npm
    #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-node-

    # - name: Create .env file
    #   run: echo "REACT_APP_RAPID_API_KEY=${{ secrets.REACT_APP_RAPID_API_KEY }}" > .env

    # - name: Install dependencies
    #   run: npm ci

    # - name: Build the React app
    #   run: npm run build
    #   env:
    #     REACT_APP_RAPID_API_KEY: "${{ secrets.REACT_APP_RAPID_API_KEY }}"

    # - name: Log in to Docker Hub
    #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # - name: Build Docker image
    #   run: docker build -t ${{ secrets.DOCKER_USERNAME }}/gym-app:latest .

    # - name: Push Docker image to Docker Hub
    #   run: docker push ${{ secrets.DOCKER_USERNAME }}/gym-app:latest
    
    # - name: Deploy to EC2
    #   env:
    #     EC2_HOST: ${{ secrets.EC2_HOST }}
    #     EC2_USER: ${{ secrets.EC2_USER }}
    #     EC2_KEY: ${{ secrets.EC2_KEY }}
    #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #   run: |
    #     echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
    #     chmod 600 ec2_key.pem
    
    #     echo "Connecting to EC2 instance..."
    #     ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
    #       echo "Checking Docker status..."
    #       sudo systemctl status docker
    
    #       echo "Using Docker image: $DOCKER_USERNAME/gym-app:latest"
    #       echo "Pulling the latest Docker image..."
    #       sudo docker pull "${{ secrets.DOCKER_USERNAME }}/gym-app:latest"
    
    #       echo "Stopping and removing any existing container..."
    #       if [ "$(sudo docker ps -q -f name=gym-app)" ]; then
    #         sudo docker stop gym-app
    #         sudo docker rm gym-app
    #       fi
    
    #       echo "Running the new container..."
    #       sudo docker run -d --name gym-app -p 3000:3000 "${{ secrets.DOCKER_USERNAME }}/gym-app:latest"
    #     EOF

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Pull Docker image from Docker Hub
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/gym-app:latest
    - name: Deploy to Azure
      env:
          AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
          AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
          AZURE_VM_KEY: ${{ secrets.AZURE_VM_KEY }}
      run: |
          echo "${{ secrets.AZURE_VM_KEY }}" > azure_key.pem
          chmod 600 azure_key.pem
  
          echo "Connecting to Azure VM..."
          ssh -o StrictHostKeyChecking=no -i azure_key.pem $AZURE_VM_USER@$AZURE_VM_IP << 'EOF'
            echo "Pulling the latest Docker image..."
            sudo docker pull $DOCKER_USERNAME/gym-app:latest
  
            echo "Stopping and removing any existing container..."
            if [ "$(sudo docker ps -q -f name=gym-app)" ]; then
              sudo docker stop gym-app
              sudo docker rm gym-app
            fi
  
            echo "Running the new container..."
            sudo docker run -d --name gym-app -p 3000:3000 $DOCKER_USERNAME/gym-app:latest
          EOF
    
